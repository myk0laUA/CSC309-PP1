import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export default async function handler(req, res) {
    if (req.method === "POST") {
        const { title, description, tags, linkToTemplates, userId } = req.body;

        if (!title || !description || !tags || !userId) {
            return res.status(400).json({ error: 'Missing items' });    

        }

        const blogPost = await prisma.blogPost.create({
            data: {
                title,
                description,
                tags,
                linkToTemplates,
                userId,
            },
        });

        return res.status(201).json(blogPost);
    
    } else if (req.method == "GET") {

        const { title, description, tags, linkToTemplates } = req.query;

        const queryConditions = {};

        if (title) {
            queryConditions.title = { contains: title };
        }

        if (description) {
            queryConditions.description = { contains: description };
        }

        if (tags) {
            queryConditions.tags = { hasEvery: tags.split(',') }; 
        }

        // generated by ChatGPT
        let blogPosts;
        if (linkToTemplates) {
            const templateIds = linkToTemplates.split(',').map(id => parseInt(id.trim()));
    
            
            blogPosts = await prisma.blogPost.findMany({
                where: queryConditions,
                include: {
                    linkToTemplates: {
                        include: {
                            template: true, 
                        },
                    },
                },
            });
    
            
            blogPosts = blogPosts.filter(blogPost => {
                const linkedTemplateIds = blogPost.linkToTemplates.map(link => link.templateId);
                return templateIds.every(id => linkedTemplateIds.includes(id)); 
            });
        } else {
            
            blogPosts = await prisma.blogPost.findMany({
                where: queryConditions,
                include: {
                    linkToTemplates: {
                        include: {
                            template: true, 
                        },
                    },
                },
            });
        }

        
        if (tags) {
            const tagArray = tags.split(',').map(tag => tag.trim()); 
    
            const filteredPosts = blogPosts.filter(blogPost => {
                const dbTagsArray = blogPost.tags.split(',').map(tag => tag.trim());
                
                return tagArray.every(tag => dbTagsArray.includes(tag));
            });
    
            return res.status(200).json(filteredPosts);
        }

        return res.status(200).json(blogPosts);

    
    } else {
        res.status(405).json({ message: "Method not allowed" });
    
    }
}
