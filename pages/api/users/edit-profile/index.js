import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient(); 

import bcrypt from 'bcrypt';

import authenticateJWT from '../../protected/authorization';

const avaliableAvatars = [ 
    // Generated by ChatGPT
    'http://localhost:3000/avatars/avatar1.png',
    'http://localhost:3000/avatars/avatar2.png',
    'http://localhost:3000/avatars/avatar3.png',
    'http://localhost:3000/avatars/avatar4.png',
    'http://localhost:3000/avatars/avatar5.png'
];

// allows user to edit profile information
export default async function handler(req, res) {
    await authenticateJWT(req, res, async () => { // user authentication (generated by ChatGPT)
        if (req.method === "PUT") {
            
            const id  = req.user.id; // generated by ChatGPT

            const { email, password, avatar, phoneNum } = req.body;

            // generated by ChatGPT
            if (email) {
                const emailUser = await prisma.user.findFirst({
                    where: { email },
                });
                if (emailUser && emailUser.id !== id) {
                    return res.status(400).json({ error: 'Email already exists' });
                }
            }
            if (phoneNum) {
                const phoneNumUser = await prisma.user.findFirst({
                    where: { phoneNum },
                });
                if (phoneNumUser && phoneNumUser.id !== id) {
                    return res.status(400).json({ error: 'Phone number already exists' });
                }
            }

            if (avatar && !avaliableAvatars.includes(avatar)) {
                return res.status(400).json({ error: 'Invalid avatar. Choose one of 3 available avatars: http://localhost:3000/avatars/avatar1.png, http://localhost:3000/avatars/avatar2.png, http://localhost:3000/avatars/avatar3.png. You can also choose to have no avatar.' });
            }

            const existingUser = await prisma.user.findUnique({
                where: { id },
            });

            let updatedUser;

            // uodates user info depending on whether password is changed
            if (password) {
                const hashedPassword = await bcrypt.hash(password, 10);
                updatedUser = await prisma.user.update({
                    where: { id },
                    data: {
                        email: email || existingUser.email,
                        password: hashedPassword,
                        avatar: avatar || existingUser.avatar,
                        phoneNum: phoneNum || existingUser.phoneNum,
    
                    },
                });

            } else {
                updatedUser = await prisma.user.update({
                    where: { id },
                    data: {
                        email: email || existingUser.email,
                        avatar: avatar || existingUser.avatar,
                        phoneNum: phoneNum || existingUser.phoneNum,
    
                    },
                });

            }

            return res.status(200).json(updatedUser);

        } else {
            
            res.status(405).json({ error: "Method not allowed" });

        }

    });
}
