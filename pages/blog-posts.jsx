import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import '../app/globals.css';
import { FaTrash, FaThumbsUp, FaThumbsDown } from 'react-icons/fa';

{/* Generated by ChatGPT */}  
const BlogPosts = () => {

  const [blogPosts, setBlogPosts] = useState([]);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchBlogPosts = async () => {
      try {
        const response = await fetch('http://localhost:3000/api/blogPost');
        
        if (!response.ok) {
          throw new Error('Failed to fetch blog posts');
        }

        const data = await response.json();
        setBlogPosts(data.data); 
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false); 
      }
    };

    fetchBlogPosts();
  }, []);

  const handleDelete = async (id) => {
    try {
      const token = localStorage.getItem('accessToken');
      if (!token) {
        setError('No authentication token found');
        return;
      }

      const response = await fetch(`http://localhost:3000/api/blogPost/${id}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
      });

      if (response.ok) {
        // Remove the deleted blog post from the state
        setBlogPosts(blogPosts.filter(post => post.id !== id));
      } else {
        throw new Error('Failed to delete the blog post');
      }
    } catch (err) {
      setError(err.message);
    }
  }; 

  const handleVote = async (id, vote) => {
    try {
      const token = localStorage.getItem('accessToken');
      if (!token) {
        setError('No authentication token found');
        return;
      }

      const response = await fetch(`http://localhost:3000/api/blogPost/${id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({ vote }),
      });

      const result = await response.json();
      
      if (response.ok) {
        
      } else {
        throw new Error(result.error || 'Failed to vote');
      }
    } catch (err) {
      setError(err.message);
    }
  };

  if (loading) return <div>Loading blog posts...</div>;
  

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-4">Blog Posts</h2>

      
      <div className="flex justify-start mb-6 space-x-4">
        <Link href="/create-post">
          <button className="bg-green-500 text-white px-6 py-3 rounded-lg text-xl hover:bg-green-600">
            Create Blog Post
          </button>
        </Link>

        <button className="bg-gray-500 text-white px-6 py-3 rounded-lg text-xl hover:bg-gray-600">
          Filter Results
        </button>
      </div>

      
      <div className="space-y-6">
        {blogPosts.map((post) => (
          <div key={post.id} className="bg-white p-6 shadow-lg rounded-lg hover:shadow-xl transition-shadow duration-300 relative">
            <button
              onClick={() => handleDelete(post.id)}
              className="text-red-500 hover:text-red-600 absolute top-4 right-4"
            >
              <FaTrash size={15} />
            </button>

            <div className="flex justify-between items-center">
              <h3 className="text-xl font-semibold mb-2">{post.title}</h3>
              <span className="text-sm text-gray-500">Author: {post.author.username}</span>
            </div>

            <p className="text-gray-700 mb-2">{post.description}</p>

            <div className="text-sm text-gray-500 mb-4">
              <strong>Tags:</strong> {post.tags}
            </div>

            <div className="flex items-center space-x-4">
              <button
                onClick={() => handleVote(post.id, 'upvote')}
                className="text-green-500 hover:text-green-600"
              >
                <FaThumbsUp size={20} />
              </button>
              <button
                onClick={() => handleVote(post.id, 'downvote')}
                className="text-red-500 hover:text-red-600"
              >
                <FaThumbsDown size={20} />
              </button>
            </div>

            <Link href={`/edit-post/${post.id}`}>
              <button className="mt-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 w-full">
                Edit
              </button>
            </Link>
          </div>
        ))}
      </div>

      <Link href="/">
        <button
        className="mt-4 bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 w-full"
        >
        Back
        </button>
      </Link>

      </div>
    );
  };
  
  export default BlogPosts;