import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import '../app/globals.css';
import { FaTrash, FaThumbsUp, FaThumbsDown } from 'react-icons/fa';

{/* Generated by ChatGPT */}  
const BlogPosts = () => {

  const [blogPosts, setBlogPosts] = useState([]);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(true);
  const [showFilterModal, setShowFilterModal] = useState(false);
  const [filterTitle, setFilterTitle] = useState('');
  const [filterDescription, setFilterDescription] = useState('');
  const [filterTemplateMention, setFilterTemplateMention] = useState('');
  const [filterTags, setFilterTags] = useState('');
  const [sortOption, setSortOption] = useState('oldest');
  const [currentPage, setCurrentPage] = useState(1);
  const [limit, setLimit] = useState(10);
  const [totalPages, setTotalPages] = useState(1);

  const [isLoggedIn, setIsLoggedIn] = useState(false);

  useEffect(() => {
    const token = localStorage.getItem('accessToken');
    setIsLoggedIn(!!token); 
  }, []);  

  const fetchBlogPosts = async (title = '', description = '', tags = '', sort = 'oldest', templateMention, page = 1, limit = 10) => {
    try {

      let response;

      if (templateMention) {
        response = await fetch(`http://localhost:3000/api/blogPost?title=${title}&description=${description}&tags=${tags}&sort=${sort}&templateMention=${templateMention}&page=${page}&limit=${limit}`);

      } else {
        response = await fetch(`http://localhost:3000/api/blogPost?title=${title}&description=${description}&tags=${tags}&sort=${sort}&page=${page}&limit=${limit}`);
      }
      
      if (!response.ok) {
        throw new Error('Failed to fetch blog posts');
      }

      const data = await response.json();
      setBlogPosts(data.data); 
      setCurrentPage(data.page);
      setLimit(data.limit);
      setTotalPages(Math.ceil(data.totalCount / limit));


    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false); 
    }
  };

  useEffect(() => {
    fetchBlogPosts();
  }, []);


  const handleNextPage = () => {
    if (currentPage < totalPages) {
      const nextPage = currentPage + 1;
      fetchBlogPosts(filterTitle, filterDescription, filterTags, sortOption, filterTemplateMention, nextPage, limit);
      setCurrentPage(nextPage);
    }
  };
  
  const handlePreviousPage = () => {
    if (currentPage > 1) {
      const prevPage = currentPage - 1;
      fetchBlogPosts(filterTitle, filterDescription, filterTags, sortOption, filterTemplateMention, prevPage, limit);
      setCurrentPage(prevPage);
    }
  };

  const handleFilterSubmit = () => {
    fetchBlogPosts(filterTitle, filterDescription, filterTags, sortOption, filterTemplateMention); 
    setShowFilterModal(false);
  };

  const openFilterModal = () => {
    setShowFilterModal(true);
  };

  const closeFilterModal = () => {
    setShowFilterModal(false);
  };  

  const handleDelete = async (id) => {
    try {
      const token = localStorage.getItem('accessToken');
      if (!token) {
        setError('No authentication token found');
        return;
      }

      const response = await fetch(`http://localhost:3000/api/blogPost/${id}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
      });

      if (response.ok) {
        // Remove the deleted blog post from the state
        setBlogPosts(blogPosts.filter(post => post.id !== id));
      } else {
        throw new Error('Failed to delete the blog post');
      }
    } catch (err) {
      setError(err.message);
    }
  }; 

  const handleVote = async (id, vote) => {
    try {
      const token = localStorage.getItem('accessToken');
      if (!token) {
        setError('No authentication token found');
        return;
      }

      const response = await fetch(`http://localhost:3000/api/blogPost/${id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({ vote }),
      });
      
      if (!response.ok) {
        throw new Error(result.error || 'Failed to vote');
      }

      const updatedPost = await response.json();

      setBlogPosts((prevPosts) =>
        prevPosts.map((post) =>
          post.id === id ? { ...post, rating: updatedPost.rating } : post
        )
      );

    } catch (err) {
      setError(err.message);
    }
  };

  const handleSortChange = (e) => {
    const selectedSort = e.target.value;
    setSortOption(selectedSort);
    fetchBlogPosts(filterTitle, filterDescription, filterTags, selectedSort, filterTemplateMention);
  };


  if (loading) return <div>Loading blog posts...</div>;
  

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-4">Blog Posts</h2>

      
      <div className="flex justify-start mb-6 space-x-4">
        <Link href="/create-post">
          <button className="bg-green-500 text-white px-6 py-3 rounded-lg text-xl hover:bg-green-600">
            Create Blog Post
          </button>
        </Link>

        <button 
          onClick={openFilterModal}
          className="bg-gray-500 text-white px-6 py-3 rounded-lg text-xl hover:bg-gray-600"
        >  
          Filter
        </button>

        {showFilterModal && (
        <div className="fixed top-0 left-0 w-full h-full bg-gray-700 bg-opacity-50 flex justify-center items-center z-50">
          <div className="bg-white p-6 rounded-lg relative">
            <h2 className="text-2xl font-semibold mb-4">Filter Blog Posts</h2>
            <input
              type="text"
              value={filterTitle}
              onChange={(e) => setFilterTitle(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded mb-4"
              placeholder="Enter title to filter"
            />
            <input
              type="text"
              value={filterDescription}
              onChange={(e) => setFilterDescription(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded mb-4"
              placeholder="Enter description to filter"
            />
            <input
              type="text"
              value={filterTags}
              onChange={(e) => setFilterTags(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded mb-4"
              placeholder="Enter tags to filter"
            />
            <input
              type="text"
              value={filterTemplateMention}
              onChange={(e) => setFilterTemplateMention(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded mb-4"
              placeholder="Search for a particular Template mentioned"
            />

            <div className="flex justify-between">
              <button
                onClick={handleFilterSubmit}
                className="bg-green-500 text-white px-6 py-3 rounded-lg text-xl hover:bg-green-600"
              >
                Apply Filter
              </button>
              <button
                onClick={closeFilterModal}
                className="bg-gray-500 text-white px-6 py-3 rounded-lg text-xl hover:bg-gray-600"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}

      <label htmlFor="sortOptions" className="text-gray-700 text-xl font-medium">
          Sort By:
      </label>

      <select
        id="sortOptions"
        value={sortOption}
        onChange={handleSortChange}
        className="bg-white text-gray-800 px-6 py-3 rounded-lg text-xl border border-gray-300"
      >
        <option value="oldest">Date Added (Oldest)</option>
        <option value="valued">Valued</option>
        <option value="controversial">Controversial</option>
      </select>
    </div>
      
      <div className="space-y-6">
        {blogPosts.map((post) => (
          <div key={post.id} className="bg-white p-6 shadow-lg rounded-lg hover:shadow-xl transition-shadow duration-300 relative">
            <button
              onClick={() => handleDelete(post.id)}
              className="text-red-500 hover:text-red-600 absolute top-4 right-4"
            >
              <FaTrash size={15} />
            </button>

            <div className="flex justify-between items-center">
              <h3 className="text-xl font-semibold mb-2">{post.title}</h3>
              <span className="text-sm text-gray-500">Author: {post.author.username}</span>
            </div>

            <div className="flex items-center text-yellow-500 mb-4">
              <strong>Rating:</strong>
              <span className="ml-2">{post.rating}</span>
            </div>

            <p className="text-gray-700 mb-2">{post.description}</p>

            <div className="text-sm text-gray-500 mb-4">
              <strong>Tags:</strong> {post.tags}
            </div>

            <div className="flex items-center space-x-4">
              <button
                onClick={() => handleVote(post.id, 'upvote')}
                className="text-green-500 hover:text-green-600"
              >
                <FaThumbsUp size={20} />
              </button>
              <button
                onClick={() => handleVote(post.id, 'downvote')}
                className="text-red-500 hover:text-red-600"
              >
                <FaThumbsDown size={20} />
              </button>
            </div>

            <Link href={`/edit-post/${post.id}`}>
              <button className="mt-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 w-full">
                Edit
              </button>
            </Link>
          </div>
        ))}
      </div>

      <div className="flex justify-between mt-6">
        <button
          onClick={handlePreviousPage}
          disabled={currentPage === 1}
          className={`px-4 py-2 rounded ${currentPage === 1 ? 'bg-gray-300' : 'bg-blue-500 text-white hover:bg-blue-600'}`}
        >
          Previous
        </button>
        
        <label htmlFor="limitOptions" className="text-gray-700 text-xl font-medium">
          Posts per page:
        </label>
        <select
          id="limitOptions"
          value={limit}
          onChange={(e) => {
            const selectedLimit = parseInt(e.target.value);
            setLimit(selectedLimit);
            fetchBlogPosts(filterTitle, filterDescription, filterTags, sortOption, filterTemplateMention, 1, selectedLimit);
          }}
          className="bg-white text-gray-800 px-6 py-3 rounded-lg text-xl border border-gray-300"
        >
          <option value="1">1</option>
          <option value="5">5</option>
          <option value="10">10</option>
          <option value="20">20</option>
        </select>

        <span className="text-gray-700">
          Page {currentPage} of {totalPages}
        </span>

        <button
          onClick={handleNextPage}
          disabled={currentPage === totalPages}
          className={`px-4 py-2 rounded ${currentPage === totalPages ? 'bg-gray-300' : 'bg-blue-500 text-white hover:bg-blue-600'}`}
        >
          Next
        </button>
      </div>

      <Link href={isLoggedIn ? "/loggedin" : "/"}>
        <button
        className="mt-4 bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 w-full"
        >
        Back
        </button>
      </Link>

      </div>
    );
  };
  
  export default BlogPosts;