// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                Int        @id @default(autoincrement())
  firstName         String
  lastName          String
  email             String     @unique
  avatar            String?    // Optional avatar URL
  phoneNum          String     @unique // Unique phone number
  templates         Template[] // One-to-many relation with Template
  blogPosts         BlogPost[] // One-to-many relation with BlogPost
  upvotedPosts      BlogPost[] @relation("UserUpvotes") // Many-to-many relation with BlogPost
  downvotedPosts    BlogPost[] @relation("UserDownvotes") // Many-to-many relation with BlogPost
  upvotedComments    Comment[]  @relation("UserCommentUpvotes") // Many-to-many relation with Comment
  downvotedComments  Comment[]  @relation("UserCommentDownvotes") // Many-to-many relation with Comment
}

model BlogPost {
  id            Int       @id @default(autoincrement())
  title         String    @unique
  description   String
  tags          String[]  
  userId        Int       
  author        User      @relation(fields: [userId], references: [id]) // Many-to-one relation
  linkToTemplates String[]  
  upvotes       Int       @default(0)
  downvotes     Int       @default(0) 
  rating        Int       @default(0)
  report        String?   
  blogPosts     BlogPost[]
  comments      Comments[]
  numReports    Int       @default(0) // Default to 0
  hidden        Boolean   @default(false)
  editability       Boolean    @default(true) // Default to true
   
}

model Template {
  id         Int      @id @default(autoincrement())
  title      String   @unique
  explanation String?
  tags       String[]
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  hidden     Boolean  @default(false)
  forkedFrom Int?     // If it's a fork, reference the original template
  code       String
}

model Comment {
  id             Int       @id @default(autoincrement())
  postId         Int
  userId         Int
  body           String
  upvotes        Int       @default(0)
  downvotes      Int       @default(0)
  numReports     Int       @default(0)
  rating         Int       @default(0)
  hidden         Boolean   @default(false)
  parentCommentId Int?
  createdAt      DateTime  @default(now())

  BlogPost       BlogPost  @relation(fields: [postId], references: [id])
  User           User      @relation(fields: [userId], references: [id])
  ParentComment  Comment?  @relation("ReplyThread", fields: [parentCommentId], references: [id])
  Replies        Comment[] @relation("ReplyThread")

  @@index([postId])
  @@index([userId])
}

model Report {
  id            Int       @id @default(autoincrement())
  reportedContentId Int   // ID of the reported content
  contentType   ContentType
  explanation   String?   // Optional explanation
  createdAt     DateTime  @default(now())

  BlogPost      BlogPost? @relation(fields: [reportedContentId], references: [id])
  Comment       Comment?  @relation(fields: [reportedContentId], references: [id])

  @@index([reportedContentId])
}

enum ContentType {
  BLOGPOST
  COMMENT
}

// Create Blog Post (POST)
// Get All
// Get All Filtered
// Get Single
// Update Single (PUT)
// Delete Single
// Upvote + Downvote
// Report Specific
// Get Comments (for Specific)
// Add Comments (to Specific)

