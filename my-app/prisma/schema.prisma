generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                Int        @id @default(autoincrement())
  firstName         String
  lastName          String
  email             String     @unique
  passwordHash      String     
  avatar            String?
  phoneNum          String     @unique
  templates         Template[]
  blogPosts         BlogPost[]
  upvotedPosts      BlogPost[] @relation("UserUpvotes")
  downvotedPosts    BlogPost[] @relation("UserDownvotes")
  upvotedComments   Comment[]  @relation("UserCommentUpvotes")
  downvotedComments Comment[]  @relation("UserCommentDownvotes")
  comments          Comment[]  // Added this field
}

model BlogPost {
  id              Int       @id @default(autoincrement())
  title           String    @unique
  description     String
  tags            String
  userId          Int
  author          User      @relation(fields: [userId], references: [id])
  linkToTemplates BlogPostTemplate[]
  upvotedByUsers  User[]     @relation("UserUpvotes")
  downvotedByUsers User[]    @relation("UserDownvotes")
  rating          Int       @default(0)
  report          String?
  comments        Comment[]
  numReports      Int       @default(0)
  hidden          Boolean   @default(false)
  editability     Boolean   @default(true)
  reports         Report[]  // Added this field
}

model Template {
  id         Int      @id @default(autoincrement())
  title      String   @unique
  explanation String?
  tags       String
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  hidden     Boolean  @default(false)
  forkedFrom Int?
  code       String
  linkedPosts BlogPostTemplate[]
}

model BlogPostTemplate {
  blogPostId Int
  templateId Int
  blogPost   BlogPost  @relation(fields: [blogPostId], references: [id])
  template   Template  @relation(fields: [templateId], references: [id])

  @@id([blogPostId, templateId])
}

model Comment {
  id             Int       @id @default(autoincrement())
  postId         Int
  userId         Int
  body           String
  upvotedByUsers User[]     @relation("UserCommentUpvotes")
  downvotedByUsers User[]   @relation("UserCommentDownvotes")
  numReports     Int       @default(0)
  rating         Int       @default(0)
  hidden         Boolean   @default(false)
  parentCommentId Int?
  createdAt      DateTime  @default(now())

  BlogPost       BlogPost  @relation(fields: [postId], references: [id])
  User           User      @relation(fields: [userId], references: [id])
  ParentComment  Comment?  @relation("ReplyThread", fields: [parentCommentId], references: [id])
  Replies        Comment[] @relation("ReplyThread")
  reports        Report[]  // Added this field
}

model Report {
  id                Int       @id @default(autoincrement())
  reportedContentId Int
  contentType       String
  explanation       String?
  createdAt         DateTime  @default(now())

  BlogPost          BlogPost? @relation(fields: [reportedContentId], references: [id])
  Comment           Comment?  @relation(fields: [reportedContentId], references: [id])
}
